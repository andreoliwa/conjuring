{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Conjuring (test if it works abc again)","text":"<p>Reusable global Invoke tasks that can be merged with local project tasks.</p>"},{"location":"#features","title":"Features","text":"<p>Click on the links below to see details about each feature:</p> <ul> <li>Display modules conditionally</li> <li>Display individual tasks conditionally</li> <li>Merge local tasks with the global tasks on the home directory</li> <li>Merge any tasks.py with Conjuring tasks</li> <li>Prefix task names of a module</li> </ul>"},{"location":"#tasks","title":"Tasks","text":"<p>Each module under the <code>conjuring/spells</code> directory is a collection of Invoke tasks.</p>"},{"location":"#quick-setup","title":"Quick setup","text":"<ol> <li>Install invoke in an isolated virtualenv with pipx:</li> </ol> <pre><code>pipx install invoke\n</code></pre> <ol> <li>Install Conjuring from GitHub, injecting it directly into the isolated virtualenv:</li> </ol> <pre><code># Conjuring doesn't have a PyPI package... yet\npipx inject invoke git+https://github.com/andreoliwa/conjuring\n</code></pre> <ol> <li>Create a <code>tasks.py</code> file on your home dir:</li> </ol> <pre><code> echo \"from conjuring.spells.default import *\" &gt; ~/tasks.py\n</code></pre> <ol> <li>You should see the list of Conjuring tasks from any directory where you type this:</li> </ol> <pre><code>invoke --list\n</code></pre>"},{"location":"features/","title":"Features","text":""},{"location":"features/#display-modules-conditionally","title":"Display modules conditionally","text":"<p>Some modules under the <code>spells</code> directory have a <code>should_display_tasks</code> boolean function to control whether the tasks are displayed or not.</p> <p>The <code>conjuring.visibility</code> module has boolean functions that can be reused by your modules and tasks.</p> <p>Example for the <code>conjuring.spells.git</code> module:</p> <pre><code>from conjuring.visibility import is_git_repo, ShouldDisplayTasks\nshould_display_tasks: ShouldDisplayTasks = is_git_repo\n</code></pre> <p>Other examples of usage:</p> <ul> <li>Poetry tasks: display only when   there is a <code>pyproject.toml</code> in the current dir;</li> <li>pre-commit tasks: display only   when there is a <code>.pre-commit-config.yaml</code> file in the current dir.</li> </ul>"},{"location":"features/#display-individual-tasks-conditionally","title":"Display individual tasks conditionally","text":"<p>A task can have its own visibility settings, even if the owner module is configured to not display tasks.</p> <pre><code>from invoke import task\nfrom conjuring.visibility import MagicTask\nfrom random import randint\n@task(klass=MagicTask)\ndef an_always_visible_task(c):\n\"\"\"A MagicTask is always visible by default.\n    It will always be displayed in every directory,\n        regardless of the module ``should_display_tasks()`` function.\n    \"\"\"\npass\n@task(klass=MagicTask, should_display=lambda: bool(randint(0, 1)))\ndef a_conditionally_visible_task(c):\n\"\"\"You can use any boolean function to determine visibility.\"\"\"\npass\n</code></pre> <p>Use case:</p> <ul> <li>you want to group tasks in a module, with a prefix and conditional display of tasks;</li> <li>you still want some individual tasks to always be displayed;</li> <li>or you want different conditions to display certain tasks.</li> </ul>"},{"location":"features/#merge-local-tasks-with-the-global-tasks-on-the-home-directory","title":"Merge local tasks with the global tasks on the home directory","text":"<p>Create local <code>conjuring*.py</code> files and it will be merged with the <code>tasks.py</code> in your home dir. Your project dir can be anywhere under your home dir.</p> <ol> <li>Create <code>~/path/to/your/project/conjuring_foo.py</code> with Invoke tasks.</li> </ol> <pre><code>from invoke import task\n@task\ndef my_foo(c):\n\"\"\"My foo task.\"\"\"\npass\n</code></pre> <ol> <li>Create another <code>~/path/to/your/project/conjuring_bar.py</code> file with more    Invoke tasks.</li> </ol> <pre><code>from invoke import task\n@task\ndef my_bar(c):\n\"\"\"My bar task.\"\"\"\npass\n</code></pre> <ol> <li>The task list in your project dir will show tasks from all files, including    the home dir task list.</li> </ol> <pre><code>$ cd ~/path/to/your/project/\n$ invoke --list\nAvailable tasks:\n\nmy-bar               My bar task.\n  my-foo               My foo task.\n  &lt;... the Conjuring tasks will show up here...&gt;\n</code></pre>"},{"location":"features/#merge-any-taskspy-with-conjuring-tasks","title":"Merge any tasks.py with Conjuring tasks","text":"<p>If you create a <code>tasks.py</code> in a project, it will override the Conjuring <code>tasks.py</code> on your home dir. You will only see your local project tasks.</p> <p>To avoid that, go to your home dir and run:</p> <pre><code>invoke conjuring.setup\n</code></pre> <p>This will create an <code>~/.invoke.yaml</code> file and rename your main tasks file to <code>~/conjuring_summon.py</code>.</p> <p>For more details, read about default configuration values on Configuration \u2014 Invoke documentation.</p>"},{"location":"features/#prefix-task-names-of-a-module","title":"Prefix task names of a module","text":"<p>If the module defines this boolean constant with a value of <code>True</code>, then the name of the module will be added as a prefix to tasks.</p> <p>Example for the <code>conjuring.spells.pre_commit</code> module:</p> <pre><code>SHOULD_PREFIX = True\n</code></pre> <p>All the tasks of this module will have a <code>pre-commit.</code> prefix when you run <code>invoke --list</code>.</p>"},{"location":"related/","title":"Related projects","text":"<ul> <li>pyinvoke/invoke: Pythonic task management &amp; command execution.</li> <li>pyinvoke/invocations: Reusable Invoke tasks</li> <li>jhermann/rituals: Project automation task library for \u2018Invoke\u2019 tasks that are needed again and again.</li> </ul>"}]}