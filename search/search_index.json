{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Conjuring Reusable global Invoke tasks that can be merged with local project tasks. Features Click on the links below to see details about each feature: Display modules conditionally Display individual tasks conditionally Merge local tasks with the global tasks on the home directory Merge any tasks.py with Conjuring tasks Prefix task names of a module Tasks Each module under the conjuring/spells directory is a collection of Invoke tasks. Quick setup Install invoke in an isolated virtualenv with pipx : pipx install invoke Install Conjuring from GitHub, injecting it directly into the isolated virtualenv: # Conjuring doesn't have a PyPI package... yet pipx inject invoke git+https://github.com/andreoliwa/conjuring Create a tasks.py file on your home dir: echo \"from conjuring.spells.default import *\" > ~/tasks.py You should see the list of Conjuring tasks from any directory where you type this: invoke --list","title":"Conjuring"},{"location":"#conjuring","text":"Reusable global Invoke tasks that can be merged with local project tasks.","title":"Conjuring"},{"location":"#features","text":"Click on the links below to see details about each feature: Display modules conditionally Display individual tasks conditionally Merge local tasks with the global tasks on the home directory Merge any tasks.py with Conjuring tasks Prefix task names of a module","title":"Features"},{"location":"#tasks","text":"Each module under the conjuring/spells directory is a collection of Invoke tasks.","title":"Tasks"},{"location":"#quick-setup","text":"Install invoke in an isolated virtualenv with pipx : pipx install invoke Install Conjuring from GitHub, injecting it directly into the isolated virtualenv: # Conjuring doesn't have a PyPI package... yet pipx inject invoke git+https://github.com/andreoliwa/conjuring Create a tasks.py file on your home dir: echo \"from conjuring.spells.default import *\" > ~/tasks.py You should see the list of Conjuring tasks from any directory where you type this: invoke --list","title":"Quick setup"},{"location":"features/","text":"Features Display modules conditionally Some modules under the spells directory have a should_display_tasks boolean function to control whether the tasks are displayed or not. The conjuring.visibility module has boolean functions that can be reused by your modules and tasks. Example for the conjuring.spells.git module: from conjuring.visibility import is_git_repo , ShouldDisplayTasks should_display_tasks : ShouldDisplayTasks = is_git_repo Other examples of usage: Poetry tasks: display only when there is a pyproject.toml in the current dir; pre-commit tasks: display only when there is a .pre-commit-config.yaml file in the current dir. Display individual tasks conditionally A task can have its own visibility settings, even if the owner module is configured to not display tasks. from invoke import task from conjuring.visibility import MagicTask from random import randint @task ( klass = MagicTask ) def an_always_visible_task ( c ): \"\"\"A MagicTask is always visible by default. It will always be displayed in every directory, regardless of the module ``should_display_tasks()`` function. \"\"\" pass @task ( klass = MagicTask , should_display = lambda : bool ( randint ( 0 , 1 ))) def a_conditionally_visible_task ( c ): \"\"\"You can use any boolean function to determine visibility.\"\"\" pass Use case: you want to group tasks in a module, with a prefix and conditional display of tasks; you still want some individual tasks to always be displayed; or you want different conditions to display certain tasks. Merge local tasks with the global tasks on the home directory Create local conjuring*.py files and it will be merged with the tasks.py in your home dir. Your project dir can be anywhere under your home dir. Create ~/path/to/your/project/conjuring_foo.py with Invoke tasks. from invoke import task @task def my_foo ( c ): \"\"\"My foo task.\"\"\" pass Create another ~/path/to/your/project/conjuring_bar.py file with more Invoke tasks. from invoke import task @task def my_bar ( c ): \"\"\"My bar task.\"\"\" pass The task list in your project dir will show tasks from all files, including the home dir task list. $ cd ~/path/to/your/project/ $ invoke --list Available tasks: my-bar My bar task. my-foo My foo task. <... the Conjuring tasks will show up here...> Merge any tasks.py with Conjuring tasks If you create a tasks.py in a project, it will override the Conjuring tasks.py on your home dir. You will only see your local project tasks. To avoid that, go to your home dir and run: invoke conjuring.setup This will create an ~/.invoke.yaml file and rename your main tasks file to ~/conjuring_summon.py . For more details, read about default configuration values on Configuration \u2014 Invoke documentation . Prefix task names of a module If the module defines this boolean constant with a value of True , then the name of the module will be added as a prefix to tasks. Example for the conjuring.spells.pre_commit module: SHOULD_PREFIX = True All the tasks of this module will have a pre-commit. prefix when you run invoke --list .","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#display-modules-conditionally","text":"Some modules under the spells directory have a should_display_tasks boolean function to control whether the tasks are displayed or not. The conjuring.visibility module has boolean functions that can be reused by your modules and tasks. Example for the conjuring.spells.git module: from conjuring.visibility import is_git_repo , ShouldDisplayTasks should_display_tasks : ShouldDisplayTasks = is_git_repo Other examples of usage: Poetry tasks: display only when there is a pyproject.toml in the current dir; pre-commit tasks: display only when there is a .pre-commit-config.yaml file in the current dir.","title":"Display modules conditionally"},{"location":"features/#display-individual-tasks-conditionally","text":"A task can have its own visibility settings, even if the owner module is configured to not display tasks. from invoke import task from conjuring.visibility import MagicTask from random import randint @task ( klass = MagicTask ) def an_always_visible_task ( c ): \"\"\"A MagicTask is always visible by default. It will always be displayed in every directory, regardless of the module ``should_display_tasks()`` function. \"\"\" pass @task ( klass = MagicTask , should_display = lambda : bool ( randint ( 0 , 1 ))) def a_conditionally_visible_task ( c ): \"\"\"You can use any boolean function to determine visibility.\"\"\" pass Use case: you want to group tasks in a module, with a prefix and conditional display of tasks; you still want some individual tasks to always be displayed; or you want different conditions to display certain tasks.","title":"Display individual tasks conditionally"},{"location":"features/#merge-local-tasks-with-the-global-tasks-on-the-home-directory","text":"Create local conjuring*.py files and it will be merged with the tasks.py in your home dir. Your project dir can be anywhere under your home dir. Create ~/path/to/your/project/conjuring_foo.py with Invoke tasks. from invoke import task @task def my_foo ( c ): \"\"\"My foo task.\"\"\" pass Create another ~/path/to/your/project/conjuring_bar.py file with more Invoke tasks. from invoke import task @task def my_bar ( c ): \"\"\"My bar task.\"\"\" pass The task list in your project dir will show tasks from all files, including the home dir task list. $ cd ~/path/to/your/project/ $ invoke --list Available tasks: my-bar My bar task. my-foo My foo task. <... the Conjuring tasks will show up here...>","title":"Merge local tasks with the global tasks on the home directory"},{"location":"features/#merge-any-taskspy-with-conjuring-tasks","text":"If you create a tasks.py in a project, it will override the Conjuring tasks.py on your home dir. You will only see your local project tasks. To avoid that, go to your home dir and run: invoke conjuring.setup This will create an ~/.invoke.yaml file and rename your main tasks file to ~/conjuring_summon.py . For more details, read about default configuration values on Configuration \u2014 Invoke documentation .","title":"Merge any tasks.py with Conjuring tasks"},{"location":"features/#prefix-task-names-of-a-module","text":"If the module defines this boolean constant with a value of True , then the name of the module will be added as a prefix to tasks. Example for the conjuring.spells.pre_commit module: SHOULD_PREFIX = True All the tasks of this module will have a pre-commit. prefix when you run invoke --list .","title":"Prefix task names of a module"},{"location":"related/","text":"Related projects pyinvoke/invoke: Pythonic task management & command execution. pyinvoke/invocations: Reusable Invoke tasks jhermann/rituals: Project automation task library for \u2018Invoke\u2019 tasks that are needed again and again.","title":"Related projects"},{"location":"related/#related-projects","text":"pyinvoke/invoke: Pythonic task management & command execution. pyinvoke/invocations: Reusable Invoke tasks jhermann/rituals: Project automation task library for \u2018Invoke\u2019 tasks that are needed again and again.","title":"Related projects"}]}