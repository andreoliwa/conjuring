{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#conjuring","title":"Conjuring","text":"<p>Reusable global Invoke tasks that can be merged with local project tasks.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Merge any local <code>tasks.py</code> file with global Conjuring tasks</li> <li>Use all global Conjuring tasks provided by this package</li> <li>Only include the global Conjuring tasks you want (opt-in mode)</li> <li>Use all Conjuring tasks excluding some (opt-out mode)</li> <li>Add your own custom tasks from Python modules or packages to global tasks</li> <li>Display your custom task modules conditionally</li> <li>Display your custom individual tasks conditionally</li> <li>Merge your project tasks with the global reusable tasks</li> <li>Prefix task names of your custom module</li> </ul> <p>More details on the features documentation.</p>"},{"location":"#tasks","title":"Tasks","text":"<p>Each module under the <code>conjuring/spells</code> directory is a collection of Invoke tasks.</p>"},{"location":"#quick-setup","title":"Quick setup","text":"<ol> <li>Install Conjuring in an isolated virtualenv with pipx:    <pre><code>pipx install --include-deps conjuring\n</code></pre>    The <code>--include-deps</code> flag is needed to install Invoke's apps (<code>invoke</code> and <code>inv</code>).</li> <li>Run the command to configure files on your home directory:</li> </ol> <pre><code>conjuring init\n\n# For more options:\n# conjuring init --help\n</code></pre> <ol> <li>You should see the list of Conjuring tasks from any directory where you type this:    <pre><code>invoke --list\n</code></pre></li> </ol> <p>For more configuration options, read the detailed documentation.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#v070-2023-05-27","title":"v0.7.0 (2023-05-27)","text":""},{"location":"CHANGELOG/#feat","title":"Feat","text":"<ul> <li>\"conjuring init\" command to set up files (#11)</li> <li>py: -s option in py.test and py.coverage</li> </ul>"},{"location":"CHANGELOG/#fix","title":"Fix","text":"<ul> <li>git: improve commit body clean-up</li> </ul>"},{"location":"CHANGELOG/#v060-2023-05-24","title":"v0.6.0 (2023-05-24)","text":""},{"location":"CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>direnv: command to init .envrc</li> </ul>"},{"location":"CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>replace print() by typer.echo()</li> <li>add typing to py and remaining tests</li> <li>add typing to mkdocs, mr, onedrive, paperless, pre-commit</li> <li>add typing and docs to some modules</li> </ul>"},{"location":"CHANGELOG/#v050-2023-05-22","title":"v0.5.0 (2023-05-22)","text":""},{"location":"CHANGELOG/#feat_2","title":"Feat","text":"<ul> <li>add global tasks from Python modules or packages</li> </ul>"},{"location":"CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>py: always show ruff-config even on non-Poetry projects</li> <li>improved messages on conjuring.init</li> </ul>"},{"location":"CHANGELOG/#v040-2023-05-21","title":"v0.4.0 (2023-05-21)","text":""},{"location":"CHANGELOG/#feat_3","title":"Feat","text":"<ul> <li>py: task to generate Ruff config from warnings</li> </ul>"},{"location":"CHANGELOG/#v030-2023-05-20","title":"v0.3.0 (2023-05-20)","text":""},{"location":"CHANGELOG/#feat_4","title":"Feat","text":"<ul> <li>choose which tasks you want to load (opt-in/opt-out)</li> </ul>"},{"location":"CHANGELOG/#v021-2023-05-20","title":"v0.2.1 (2023-05-20)","text":""},{"location":"CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>version number and project metadata</li> </ul>"},{"location":"CHANGELOG/#v020-2023-05-19","title":"v0.2.0 (2023-05-19)","text":""},{"location":"CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>read pyproject.toml with UTF-8 encoding</li> </ul>"},{"location":"CHANGELOG/#010-2023-05-19","title":"0.1.0 (2023-05-19)","text":""},{"location":"CHANGELOG/#feat_5","title":"Feat","text":"<ul> <li>media: transcribe using whisper</li> <li>mkdocs: tasks to work with documentation</li> <li>k8s: select multiple apps at once</li> <li>k8s: get pods, replica sets, config maps + validate score</li> <li>mr: add mr support, grep repos for a search text</li> <li>pre-commit: specify hooks without --hook</li> <li>python: test, watch, coverage, debug tools</li> <li>git: option to rebase master branch</li> <li>python: install/reinstall specific version</li> <li>fzf: accept options as arguments</li> <li>aws: list profiles</li> <li>allowed keys in ask_user_prompt()</li> <li>onedrive: display files with conflicts</li> <li>media: --force flag to delete files</li> <li>python: install a Poetry virtual environment</li> <li>paperless: delete failed duplicates</li> <li>remove hidden files and empty dirs</li> <li>paperless: move files instead of copying</li> <li>paperless: skip years and .DS_Store</li> <li>paperless: copy matched/unmatched files to ~/Downloads</li> <li>paperless: display orphan files, matched and unmatched</li> <li>paperless: show matched/unmatched files</li> <li>paperless: show thumbnails</li> <li>paperless: wrapper tasks for paperless</li> <li>ask user prompt</li> <li>git: prepare commit body with bullets</li> <li>git: task to tidy up repo</li> <li>pre-commit: install prepare-commit-msg</li> <li>pre-commit: uninstall all hooks</li> <li>slideshow command (first version)</li> <li>git: watch build then open PR or repo</li> <li>use AWS_PROFILE if it exists</li> <li>git: display changes since the chosen tag</li> <li>pre-commit: commit-msg hook is now optional</li> <li>shell: list and uninstall shell completions</li> <li>shell: click completion for Bash</li> <li>git: choose files with fzf, allow multiple subdirs</li> <li>download video URLs with youtube-dl</li> <li>git: merge the default branch of the repo</li> <li>git: options to rewrite commits with GPG and author</li> <li>docker: remove Docker containers and volumes</li> <li>todo: sort by type+description, option to show only FIXME</li> <li>list TODOs and FIXMEs in code</li> <li>pre-commit: accept comma-separated list of hooks to run</li> <li>git: extract files from a subtree + history + rebase/sign</li> <li>support PEP 660 hooks (editable packages)</li> <li>empty module for those who don't want the default tasks</li> <li>AWS: select account, region, ECR, aws-vault</li> <li>pre-commit: command to uninstall hooks</li> <li>poetry: choose pipx repo to inject with fzf</li> <li>display individual tasks conditionally</li> <li>visibility.py module with reusable functions</li> <li>prefix task names of a module</li> <li>display tasks conditionally</li> <li>merge any tasks.py with Conjuring tasks</li> <li>pre-commit: autoupdate one or all hooks</li> <li>use CONJURING_PREFIX to namespace tasks</li> <li>install a Poetry package as editable</li> <li>default module with all conjuring tasks</li> <li>fork tasks in a separate module</li> <li>optionally check empty dirs</li> <li>display dirs that should be emptied</li> <li>duplicity: choose a directory when restoring</li> <li>backup/restore with Duplicity</li> <li>onedrive: current year first, then others</li> <li>list dirs with _Copy files</li> <li>unhide Picasa originals dir</li> <li>merge original dirs</li> <li>merge copy dirs</li> <li>move picture dirs by year</li> <li>backup files from the m3 hard drive</li> <li>list more dirs on OneDrive</li> <li>add warn param to run_command()</li> <li>option to choose journal on tags task</li> <li>remove empty files before OneDrive dir</li> <li>open the latest N OneDrive photo dirs</li> <li>function to run with fzf</li> <li>run_command function</li> <li>ignore modules with an env var</li> <li>jrnl: journal name</li> <li>more Git helpers</li> <li>query jrnl entries and tags</li> <li>configure a generic remote</li> <li>don't add home tasks twice</li> <li>auto update nitpick</li> <li>set SSH/HTTPS URL for remote</li> <li>pre-commit install and run</li> <li>fork remote and sync</li> <li>invoke tasks for home/current dirs</li> <li>change invoke collection name</li> </ul>"},{"location":"CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>pre-commit: don't stop on the first failed hook</li> <li>deps: update dependency requests to v2.30.0</li> <li>deps: update dependency invoke to v2.1.2</li> <li>py: check lock before installing, ignore comment on version</li> <li>py: don't fail if pyenv local is not set</li> <li>git: rebase with force push, from origin</li> <li>rename to py, use venv after pyenv set local</li> <li>media: use -f as short for --force</li> <li>return user input on ask_user_prompt()</li> <li>paperless: ignore all .DS_Store, fix --together</li> <li>paperless: don't display red files that can't be checked</li> <li>git: regex to parse Jira tickets</li> <li>git: body cleanup: Jira ticket and other stuff</li> <li>duplicity: max depth when running fd in OneDrive dirs</li> <li>duplicity: uppercase $HOME</li> <li>git: shorten names for commit body command</li> <li>git: prune after deleting branches, push by default</li> <li>media: open the last file (order was random before)</li> <li>git: prune remotes before updating the repo</li> <li>git: open PR in same branch that was watched</li> <li>improved Poetry detection (#1)</li> <li>organize: call invoke task and not the tool directly</li> <li>fd flags (hidden only)</li> <li>display Conjuring tasks only on home dir</li> <li>duplicated name in main collection</li> <li>check prefix before duplicated tasks</li> <li>dry-run mode on run_command()</li> <li>remote name defaults to username</li> <li>duplicity: restore on computer subdir</li> <li>check both Telegram dirs</li> <li>move Telegram dir under Samsung Gallery</li> <li>rename organize to categorize</li> <li>convert Path to str when joining</li> <li>show Telegram dir after current year dir</li> <li>don't limit jrnl entries by default</li> <li>jrnl improvements</li> <li>allow invoke*.py files</li> <li>pty=False to remove colors</li> </ul>"},{"location":"CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>constants for common directories</li> <li>prefer qualified imports (#3)</li> <li>preparing for multiple spell books</li> <li>gita_super is a better name</li> <li>a more appropriate name</li> <li>move tasks to their spell modules</li> <li>move color constants to conjuring</li> <li>create package structure</li> </ul>"},{"location":"features/","title":"Features","text":""},{"location":"features/#modes","title":"Modes","text":"<p>Conjuring has 3 available modes (all tasks, opt-in and opt-out), detailed below.</p> <p>When you run <code>conjuring init</code>, it creates an <code>~/.invoke.yaml</code> file and a <code>~/conjuring_init.py</code> on your home directory.</p> <p>This will merge any existing local <code>tasks.py</code> file with the global Conjuring tasks.</p> <p>For more details, read about default configuration values on Configuration \u2014 Invoke documentation.</p>"},{"location":"features/#all-tasks","title":"All tasks","text":"<p>To use all global Conjuring tasks provided by this package, run:</p> <pre><code>conjuring init --mode all\n</code></pre> <p>Run <code>invoke --list</code> from any directory, and you will see all Conjuring tasks.</p>"},{"location":"features/#opt-in","title":"Opt-in","text":"<p>If you want to only include the global Conjuring tasks you want, run this command and select the files with fzf:</p> <pre><code>conjuring init --mode opt-in\n</code></pre> <p>Or you can edit the Python bootstrap file manually. Suppose you only want these global tasks:</p> <ul> <li>AWS;</li> <li>Kubernetes;</li> <li>pre-commit;</li> <li>Python;</li> <li>all tasks that install anything.</li> </ul> <p>This is how you can do it:</p> <pre><code># ~/conjuring_init.py\nfrom conjuring import Spellbook\nnamespace = Spellbook().cast_only(\"aws*\", \"k8s*\", \"pre-commit*\", \"py*\", \"*install\")\n</code></pre>"},{"location":"features/#opt-out","title":"Opt-out","text":"<p>To use all Conjuring modules and tasks, except for a few, run this command and select the files with fzf:</p> <pre><code>conjuring init --mode opt-out\n</code></pre> <p>Or you can edit the Python bootstrap file manually.</p> <p>Suppose you want all Conjuring tasks except media and OneDrive tasks. This is the way:</p> <pre><code># ~/conjuring_init.py\nfrom conjuring import Spellbook\nnamespace = Spellbook().cast_all_except(\"media*\", \"onedrive*\")\n</code></pre>"},{"location":"features/#shell-enhancements","title":"Shell enhancements","text":"<p>Invoke can also be configured with environment variables for an even smoother experience.</p> <p>Note: this is not a Conjuring feature, it's built-in in Invoke.</p>"},{"location":"features/#echo-all-commands","title":"Echo all commands","text":"<p>Echo all commands in all tasks by default, like 'make' does (documentation):</p> <pre><code># ~/.bashrc, ~/.zshrc or your favourite shell\nexport INVOKE_RUN_ECHO=1\n</code></pre>"},{"location":"features/#coloured-output","title":"Coloured output","text":"<p>Use a pseudo-terminal by default (display colored output) (documentation):</p> <pre><code># ~/.bashrc, ~/.zshrc or your favourite shell\nexport INVOKE_RUN_PTY=1\n</code></pre>"},{"location":"features/#short-aliases","title":"Short aliases","text":"<p>Add short aliases for the <code>invoke</code> command:</p> <pre><code># ~/.bashrc, ~/.zshrc or your favourite shell\nalias i='invoke'\nalias il='invoke --list'\nalias ih='invoke --help'\nalias ir='invoke --dry'\n</code></pre>"},{"location":"features/#auto-completion","title":"Auto-completion","text":"<p>Follow this quick copy/paste setup to configure auto-completion for Conjuring. Or read the links below for more details.</p> <p>To enable completion on terminals, add this to your <code>~/.bash_profile</code>:</p> <pre><code># ~/.bash_profile\nexport BASH_COMPLETION_USER_DIR=\"$HOME/.local/share/bash-completion\"\nif [[ -d \"$BASH_COMPLETION_USER_DIR/completions\" ]]; then\nfor COMPLETION in \"$BASH_COMPLETION_USER_DIR/completions/\"*; do\nsource \"$COMPLETION\"\ndone\nfi\n# https://github.com/tiangolo/typer installs completion files in this directory\nif [[ -d \"$HOME/.bash_completions/\" ]]; then\nfor COMPLETION in \"$HOME/.bash_completions/\"*; do\n[[ -r \"$COMPLETION\" ]] &amp;&amp; source \"$COMPLETION\"\ndone\nfi\n</code></pre> <p>Then run these commands to install auto-completion for Invoke and Conjuring:</p> <pre><code># To get help, run `invoke` or `invoke --help`\ninvoke --print-completion-script=bash &gt; $BASH_COMPLETION_USER_DIR/completions/invoke.bash-completion\n\n# To get help, run `conjuring` or `conjuring --help`\nconjuring --install-completion bash\n</code></pre> <p>Then open a new terminal, type <code>invoke &lt;TAB&gt;</code> or <code>conjuring &lt;TAB&gt;</code>, and you will have auto-completion.</p> <p>You can even set up auto-completion for aliases (like <code>i &lt;TAB&gt;</code> for <code>invoke</code>) with the complete-alias project.</p> <p>Some links for more details:</p> <ul> <li>Shell tab completion \u2014 Invoke documentation</li> <li>scop/bash-completion: Programmable completion functions for bash</li> <li>cykerway/complete-alias: automagical shell alias completion;</li> </ul>"},{"location":"features/#creating-your-own-reusable-tasks","title":"Creating your own reusable tasks","text":""},{"location":"features/#add-your-own-custom-tasks-from-python-modules-or-packages-to-global-tasks","title":"Add your own custom tasks from Python modules or packages to global tasks","text":"<p>You can create your own Python modules or packages with Invoke tasks, and they can be added to the global scope and be available from any directory.</p> <ul> <li>On the init file, call <code>import_dirs()</code> with the path to your modules or packages;</li> <li>The import method detects if the directory is a Python package or not,   and imports it accordingly;</li> <li>The example uses <code>cast_all()</code>, but you can use any of the other <code>cast_*</code>   methods described above (opt-in   or opt-out).</li> </ul> <pre><code># ~/conjuring_init.py\nfrom conjuring import Spellbook\nnamespace = (\nSpellbook()\n.import_dirs(\n\"~/path/to/your/src/my_package\",\n\"~/path/to/a/some-directory-with-py-files\",\n)\n.cast_all()\n)\n</code></pre>"},{"location":"features/#display-your-custom-task-modules-conditionally","title":"Display your custom task modules conditionally","text":"<p>Some modules under the <code>spells</code> directory have a <code>should_display_tasks</code> boolean function to control whether the tasks are displayed or not.</p> <p>The <code>conjuring.visibility</code> module has boolean functions that can be reused by your modules and tasks.</p> <p>Example from the <code>conjuring.spells.git</code> module:</p> <pre><code># /path/to/your_task_module.py\nfrom conjuring.visibility import is_git_repo, ShouldDisplayTasks\nshould_display_tasks: ShouldDisplayTasks = is_git_repo\n</code></pre> <p>Other use cases:</p> <ul> <li>Poetry tasks: display only when   there is a <code>pyproject.toml</code> in the current dir;</li> <li>pre-commit tasks: display only   when there is a <code>.pre-commit-config.yaml</code> file in the current dir.</li> </ul>"},{"location":"features/#display-your-custom-individual-tasks-conditionally","title":"Display your custom individual tasks conditionally","text":"<p>A task can have its own visibility settings, even if the owner module is configured to not display tasks.</p> <pre><code># /path/to/another_task_module.py\nfrom invoke import task\nfrom conjuring.visibility import MagicTask\nfrom random import randint\n@task(klass=MagicTask)\ndef an_always_visible_task(c):\n\"\"\"A MagicTask is always visible by default.\n    It will always be displayed in every directory,\n        regardless of the module ``should_display_tasks()`` function.\n    \"\"\"\npass\n@task(klass=MagicTask, should_display=lambda: bool(randint(0, 1)))\ndef a_conditionally_visible_task(c):\n\"\"\"You can use any boolean function to determine visibility.\"\"\"\npass\n</code></pre> <p>Use case:</p> <ul> <li>you want to group tasks in a module, with a prefix and conditional display of tasks;</li> <li>you still want some individual tasks to always be displayed;</li> <li>or you want different conditions to display certain tasks.</li> </ul>"},{"location":"features/#merge-your-project-tasks-with-the-global-reusable-tasks","title":"Merge your project tasks with the global reusable tasks","text":"<p>Create local <code>conjuring*.py</code> files, and they will be merged with the <code>tasks.py</code> in your home dir. Your project dir can be anywhere under your home dir.</p> <p>Create two modules with Invoke tasks:</p> <pre><code># ~/path/to/project/conjuring_foo.py\nfrom invoke import task\n@task\ndef my_foo(c):\n\"\"\"My foo task.\"\"\"\npass\n# ~/path/to/project/conjuring_bar.py\nfrom invoke import task\n@task\ndef my_bar(c):\n\"\"\"My bar task.\"\"\"\npass\n</code></pre> <p>The task list in your project dir will show tasks from all files, including the home dir task list.</p> <pre><code>$ cd ~/path/to/project/\n$ invoke --list\nAvailable tasks:\n\nmy-bar               My bar task.\n my-foo               My foo task.\n &lt;... the global Conjuring tasks will show up here...&gt;\n</code></pre>"},{"location":"features/#prefix-task-names-of-your-custom-module","title":"Prefix task names of your custom module","text":"<p>If the module defines this boolean constant with a value of <code>True</code>, then the name of the module will be added as a prefix to tasks.</p> <p>Example for the <code>conjuring.spells.pre_commit</code> module:</p> <pre><code>SHOULD_PREFIX = True\n</code></pre> <p>All the tasks of this module will have a <code>pre-commit.</code> prefix when you run <code>invoke --list</code>.</p>"},{"location":"related/","title":"Related projects","text":"<ul> <li>pyinvoke/invoke: Pythonic task management &amp; command execution.</li> <li>pyinvoke/invocations: Reusable Invoke tasks</li> <li>jhermann/rituals: Project automation task library for \u2018Invoke\u2019 tasks that are needed again and again.</li> </ul>"}]}